<?php namespace App\Services\Activation;

use App\Support\Tools;

class PluginActivation {

    private const NGINX = 'nginx';
    private const APACHE = 'Apache';
    
    private array $user_activation_callbacks = [];

    public function __construct( ) { }

    public function init( ){
        $plugin_fqn = realpath(base_path(config('app.plugin.fqn')));        
        register_activation_hook($plugin_fqn, [$this,'on_activation']);
    }

    public function add_activation_callback(callable $callback): void {
        $this->user_activation_callbacks[] = $callback;
    }


    public function on_activation(): void {
        // Main activation tasks
        if (config('app.plugin.requires_htaccess')) {
            $this->rest_api_config();
        }

        // Execute additional callbacks
        foreach ($this->user_activation_callbacks as $callback) {
            call_user_func($callback);
        }
    }



    public function rest_api_config( ) {
        match( $this->get_web_server( )) {
            self::NGINX  => $this->notify_user_of_nginx_requirements(),
            self::APACHE => $this->update_htaccess_file(),
            default      => $this->notify_user_of_unknown_web_server( )
        };
    }
    

    private function get_rewrite_base(): string {
        $home_path = \parse_url(get_site_url(), PHP_URL_PATH); // Extract path part of the URL
        return \rtrim($home_path, '/') . '/'; // Ensure it always ends with a /
    }
    

    private function htaccess_exists(){
        return \file_exists(constant('ABSPATH').'.htaccess');
    }


    public function update_htaccess_file(): void {
        if ( !$this->htaccess_exists( )) {
            $htaccess_path = constant('ABSPATH') . '.htaccess';
            $app_name = config('app.name');
            $rewrite_base = $this->get_rewrite_base();
            $index_base   = ". {$rewrite_base}index.php [L]";
            // phpcs:ignore Squiz.PHP.Heredoc.NotAllowed            
            $htaccess_content = 
<<<HTACCESS
# BEGIN WordPress
# The directives (lines) between "BEGIN WordPress" and "END WordPress" were 
# dynamically generated By $app_name
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
RewriteBase $rewrite_base 
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule $index_base
</IfModule>
# END WordPress
HTACCESS;
            
            \file_put_contents($htaccess_path, $htaccess_content);
        }       
    }


    private function get_web_server(): ?string {
        global $is_apache, $is_nginx;

        if (isset($_SERVER['SERVER_SOFTWARE'])) {
            return match(  true ) {
                stripos($_SERVER['SERVER_SOFTWARE'], self::NGINX) !== false  => self::NGINX,
                stripos($_SERVER['SERVER_SOFTWARE'], self::APACHE) !== false => self::APACHE,
                default                                                                        => null,
            };
        } else {
            return match(  true ) {
                $is_nginx  => self::NGINX,
                $is_apache => self::APACHE,                
                default    => null,
            };
        }
    }

    private function generate_nginx_config_snippet() {
        // phpcs:ignore Squiz.PHP.Heredoc.NotAllowed
        $config = 
<<<EOL
# Nginx configuration for WordPress REST API
location ~ ^/wp-json/ {
    rewrite ^/wp-json/(.*)$ /index.php?rest_route=/$1 last;
}
EOL;
        $file = constant('WP_CONTENT_DIR') . '/nginx-rest-api.conf'; // Save in wp-content
        file_put_contents($file, $config);

        return $file;
    }

    public function notify_user_of_nginx_requirements() {
        $config_file = $this->generate_nginx_config_snippet();
        Tools::writeTolog( \file_get_contents( $config_file ), "Please add the following Nginx configuration manually");
    }

    public function notify_user_of_unknown_web_server() {        
        Tools::writeTolog( 'We could not identify the type of web-server you '.
                           'are using, if the ret api is not functioning, '.
                           'please contact your web hosting provider', 'Unknown web server');
    }

}